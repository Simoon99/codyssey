"use client";

import { useState } from "react";
import { X, Copy, Check, Sparkles, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";

interface PromptModalProps {
  isOpen: boolean;
  onClose: () => void;
  prompt: string;
  isGenerating?: boolean;
  helperName?: string;
}

export function PromptModal({
  isOpen,
  onClose,
  prompt,
  isGenerating = false,
  helperName = "Helper",
}: PromptModalProps) {
  const [copied, setCopied] = useState(false);

  if (!isOpen) return null;

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(prompt);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error("Failed to copy:", error);
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4">
      <div className="relative w-full max-w-4xl max-h-[90vh] bg-white rounded-2xl shadow-2xl overflow-hidden flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between border-b border-zinc-200 bg-gradient-to-r from-purple-50 to-blue-50 px-6 py-4">
          <div className="flex items-center gap-3">
            <div className="flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-purple-500 to-blue-500">
              <Sparkles className="h-5 w-5 text-white" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-zinc-800">
                Vibecoding Prompt Generator
              </h2>
              <p className="text-sm text-zinc-600">
                Generated by {helperName} with full project context
              </p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="flex h-8 w-8 items-center justify-center rounded-full text-zinc-600 transition-colors hover:bg-zinc-200"
            aria-label="Close"
          >
            <X size={20} />
          </button>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-6">
          {isGenerating ? (
            <div className="flex flex-col items-center justify-center py-16">
              <Loader2 className="h-12 w-12 animate-spin text-purple-500 mb-4" />
              <p className="text-lg font-medium text-zinc-700">
                Generating your comprehensive prompt...
              </p>
              <p className="text-sm text-zinc-500 mt-2">
                Gathering insights from all helpers and your journey progress
              </p>
            </div>
          ) : (
            <>
              {/* Prompt Preview */}
              <div className="rounded-lg border border-zinc-200 bg-zinc-50 p-4 font-mono text-sm text-zinc-800 whitespace-pre-wrap break-words">
                {prompt || "No prompt generated yet."}
              </div>

              {/* Instructions */}
              <div className="mt-6 rounded-lg border border-blue-200 bg-blue-50 p-4">
                <h3 className="font-semibold text-blue-900 mb-2 flex items-center gap-2">
                  <Sparkles className="h-4 w-4" />
                  How to use this prompt
                </h3>
                <ul className="space-y-2 text-sm text-blue-800">
                  <li className="flex gap-2">
                    <span>1.</span>
                    <span>Copy the prompt using the button below</span>
                  </li>
                  <li className="flex gap-2">
                    <span>2.</span>
                    <span>
                      Open your preferred Vibecoding tool (Cursor, Lovable,
                      Bolt, etc.)
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span>3.</span>
                    <span>
                      Paste the prompt to give the AI full context about your
                      project
                    </span>
                  </li>
                  <li className="flex gap-2">
                    <span>4.</span>
                    <span>
                      Add any specific implementation details or questions you
                      have
                    </span>
                  </li>
                </ul>
              </div>
            </>
          )}
        </div>

        {/* Footer */}
        {!isGenerating && (
          <div className="flex items-center justify-between border-t border-zinc-200 bg-zinc-50 px-6 py-4">
            <p className="text-xs text-zinc-600">
              {prompt.length} characters â€¢ Optimized for AI coding tools
            </p>
            <div className="flex gap-3">
              <Button
                onClick={onClose}
                variant="outline"
                className="text-zinc-700 border-zinc-300 hover:bg-zinc-100"
              >
                Close
              </Button>
              <Button
                onClick={handleCopy}
                className="bg-gradient-to-r from-purple-500 to-blue-500 text-white hover:from-purple-600 hover:to-blue-600"
              >
                {copied ? (
                  <>
                    <Check size={16} className="mr-2" />
                    Copied!
                  </>
                ) : (
                  <>
                    <Copy size={16} className="mr-2" />
                    Copy to Clipboard
                  </>
                )}
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

